package module_2.lesson_2_4.step_10;

//    Вам дан список ролей и сценарий пьесы в виде массива строчек.
//
//    Каждая строчка сценария пьесы дана в следующем виде:
//    Роль: текст
//
//    Текст может содержать любые символы.
//
//    Напишите метод, который будет группировать строчки по ролям, пронумеровывать их и возвращать результат в виде готового текста (см. пример). Каждая группа распечатывается в следующем виде:
//
//    Роль:
//    i) текст
//    j) текст2
//    ...
//    ==перевод строки==
//
//    i и j -- номера строк в сценарии. Индексация строчек начинается с единицы, выводить группы следует в соответствии с порядком ролей. Переводы строк между группами обязательны, переводы строк в конце текста не учитываются.
//
//    Заметим, что вам предстоит обработка огромной пьесы в 50 000 строк для 10 ролей – соответственно, неправильная сборка результирующей строчки может выйти за ограничение по времени.
//
//    Sample Input:
//
//    roles:
//    Городничий
//    Аммос Федорович
//    Артемий Филиппович
//    Лука Лукич
//    textLines:
//    Городничий: Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.
//    Аммос Федорович: Как ревизор?
//    Артемий Филиппович: Как ревизор?
//    Городничий: Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.
//    Аммос Федорович: Вот те на!
//    Артемий Филиппович: Вот не было заботы, так подай!
//    Лука Лукич: Господи боже! еще и с секретным предписаньем!
//
//    Sample Output:
//
//    Городничий:
//    1) Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.
//    4) Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.
//
//    Аммос Федорович:
//    2) Как ревизор?
//    5) Вот те на!
//
//    Артемий Филиппович:
//    3) Как ревизор?
//    6) Вот не было заботы, так подай!
//
//    Лука Лукич:
//    7) Господи боже! Еще и с секретным предписаньем!

/**
 * @author modkomi
 * @since 14.05.2016
 */
public class Main {

    public static void main(String[] args) {
        String[] roles = {"Городничий", "Аммос Федорович", "Артемий Филиппович", "Лука Лукич"};
        String[] textLines = {
                "Городничий: Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.",
                "Аммос Федорович: Как ревизор?",
                "Артемий Филиппович: Как ревизор?",
                "Городничий: Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.",
                "Аммос Федорович: Вот те на!",
                "Артемий Филиппович: Вот не было заботы, так подай!",
                "Лука Лукич: Господи боже!: еще и: с секретным : предписаньем!"
        };

        printTextPerRole(roles, textLines);
    }

    private static String printTextPerRole(String[] roles, String[] textLines) {

        StringBuilder[] textByRoles = new StringBuilder[roles.length];
        String result = "";

        for (int i = 0; i < roles.length; i++) {
            textByRoles[i] = new StringBuilder(roles[i] + ":");
        }

        for (int i = 0; i < textLines.length; i++) {
            String[] splitLine = textLines[i].split(": ", 2);

            String role = splitLine[0];
            String text = splitLine[1];

            int j = 0;
            while (!roles[j].equals(role)) {
                j++;
            }

            textByRoles[j].append("\n")
                    .append(i + 1)
                    .append(") ")
                    .append(text);
        }

        for (StringBuilder roleAndText : textByRoles) {
            result += roleAndText + "\n\n";
        }

        return result;
    }

}
